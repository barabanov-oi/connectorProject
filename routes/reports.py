from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify, Flask
import threading
from services.reports.report_service import load_report_config, save_report_config
from services.connectors.connector_service import load_connector_config
from services.direct_reports import process_reports
from config_handler import parse_dates, get_periods
from services.reports.file_saver import save_report_to_file
from services.reports.google_sheets_saver import save_to_google_sheets
from services.reports.report_queue import add_report_to_queue, update_report_status, load_report_queue
from datetime import datetime
import pandas as pd

app = Flask(__name__)
reports_bp = Blueprint('reports', __name__)


def run_report_background(client_login, report_name):
    """–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞."""
    try:
        report_config = load_report_config(client_login, report_name)
        connector_config = load_connector_config(client_login)
        token = connector_config.get("YANDEX_OAUTH_TOKEN")

        if not token:
            update_report_status(client_login, report_name, "–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç OAuth-—Ç–æ–∫–µ–Ω")
            return

        field_names = report_config.get("FIELD_NAMES", [])
        if report_config.get("START_DATE") and report_config.get("END_DATE"):
            raw_start_date = report_config.get("START_DATE")
            raw_end_date = report_config.get("END_DATE")

            if raw_start_date and raw_end_date:
                start_date, end_date = parse_dates(raw_start_date, raw_end_date)
            else:
                start_date, end_date = None, None
            periods = get_periods(start_date, end_date, report_config.get("PERIOD_DETAIL", "none"))
            report_config["Periods"] = periods
        else:
            start_date, end_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        # ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º period_str —Ä–∞–Ω—å—à–µ, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω
        period_str = f"{start_date.strftime('%d-%m-%Y')} - {end_date.strftime('%d-%m-%Y')}" if start_date and end_date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        df, report_lines, reports_ids = process_reports(token, field_names, report_config)

        if df.empty:
            update_report_status(client_login, report_name, "–ì–æ—Ç–æ–≤–æ (–ø—É—Å—Ç–æ–π –æ—Ç—á–µ—Ç)", 0, f"{start_date} - {end_date}")
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        save_format = report_config.get("SAVE_FORMAT")
        if save_format in ["csv", "xlsx"]:
            save_report_to_file(df, client_login, report_name, save_format)

        # –ó–∞–ø–∏—Å—å –≤ Google Sheets
        save_type = report_config.get("SAVE_TYPE", "")
        result_link = "-"

        if save_type == "google_sheets":
            sheet_id = report_config.get("SHEET_ID")
            sheet_name = report_config.get("SHEET_NAME")
            credentials_file = report_config.get("CREDENTIALS_FILE", report_config.get("SAVE_DRIVER", ""))

            result_link = f"https://docs.google.com/spreadsheets/d/{sheet_id}" if sheet_id else None

            if sheet_id and sheet_name:
                success = save_to_google_sheets(df, sheet_id, sheet_name, credentials_file)
                if success:
                    update_report_status(client_login, report_name, "–ì–æ—Ç–æ–≤–æ", df.shape[0], period_str, result_link,
                                         reports_ids)
                else:
                    result_link = "-"

        update_report_status(client_login, report_name, "–ì–æ—Ç–æ–≤–æ", df.shape[0], period_str, result_link)

    except Exception as e:
        update_report_status(client_login, report_name, f"–û—à–∏–±–∫–∞: {str(e)}")


@reports_bp.route('/reports/<client_login>/<report_name>/run', methods=['POST'])
def run_report(client_login, report_name):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç—á—ë—Ç –≤ —Ñ–æ–Ω–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥—å."""
    add_report_to_queue(client_login, report_name)
    thread = threading.Thread(target=run_report_background, args=(client_login, report_name))
    thread.start()
    flash(f"üöÄ –û—Ç—á—ë—Ç {report_name} –∑–∞–ø—É—â–µ–Ω!", "info")
    return redirect(url_for('reports.report_queue'))

@reports_bp.route('/reports/queue', methods=['GET'])
def report_queue():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤."""
    queue = load_report_queue()
    return render_template('reports/queue.html', queue=queue)

@reports_bp.route('/reports/', methods=['GET'])
def list_reports():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç—á—ë—Ç–æ–≤ –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç –≤ —à–∞–±–ª–æ–Ω."""
    from services.reports.report_service import load_all_reports  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

    reports = load_all_reports()  # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—á—ë—Ç–æ–≤
    return render_template('reports/list.html', reports=reports)


@reports_bp.route('/reports/<client_login>/<report_name>/edit', methods=['GET'])
def edit_report(client_login, report_name):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON-–∫–æ–Ω—Ñ–∏–≥ –æ—Ç—á–µ—Ç–∞ –≤ HTML-—Ä–µ–¥–∞–∫—Ç–æ—Ä."""
    try:
        # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞
        report_config = load_report_config(client_login, report_name)

        if not report_config:
            flash(f"‚ùå –û—à–∏–±–∫–∞: –æ—Ç—á—ë—Ç {report_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.", "danger")
            return "–û—à–∏–±–∫–∞: –æ—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", 404

        # ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ JSON –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        report_json = json.dumps(report_config, indent=4, ensure_ascii=False)

        return render_template(
            'reports/edit.html',
            client_login=client_login,
            report_name=report_name,
            report_json=report_json
        )

    except FileNotFoundError:
        flash(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ {client_login}_{report_name}.json –Ω–µ –Ω–∞–π–¥–µ–Ω.", "danger")
        return "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", 404

    except Exception as e:
        flash(f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}", "danger")
        return f"–û—à–∏–±–∫–∞: {str(e)}", 500


# –§–∏–ª—å—Ç—Ä –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç –≤ Jinja
def datetimeformat(value, format='%d-%m-%Y %H:%M:%S'):
    if isinstance(value, str):
        try:
            value = datetime.strptime(value, "%Y-%m-%d %H:%M:%S")  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –¥–∞—Ç—É
        except ValueError:
            return value  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    return value.strftime(format)


# –§–∏–ª—å—Ç—Ä –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ (–î–î-–ú–ú-–ì–ì–ì–ì - –î–î-–ú–ú-–ì–ì–ì–ì)
def periodformat(value):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–∏–æ–¥ –æ—Ç—á—ë—Ç–∞ –≤ –î–î-–ú–ú-–ì–ì–ì–ì - –î–î-–ú–ú-–ì–ì–ì–ì"""
    try:
        start, end = value.split(" - ")
        start_date = datetime.strptime(start.split(".")[0], "%Y-%m-%d %H:%M:%S").strftime("%d-%m-%Y")
        end_date = datetime.strptime(end.split(".")[0], "%Y-%m-%d %H:%M:%S").strftime("%d-%m-%Y")
        return f"{start_date} - {end_date}"
    except Exception:
        return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫"  # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
